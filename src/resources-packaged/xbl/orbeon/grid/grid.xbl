<!--
  Copyright (C) 2011 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:ev="http://www.w3.org/2001/xml-events"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors"
         xmlns:exf="http://www.exforms.org/exf/1-0"
         xmlns:fb="http://orbeon.org/oxf/xml/form-builder"
         xmlns:xformsUtils="java:org.orbeon.oxf.xforms.XFormsUtils"
         xmlns:gridOps="java:org.orbeon.oxf.fb.GridOps"
         xmlns:controlOps="java:org.orbeon.oxf.fb.ControlOps"

         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:xforms="http://www.w3.org/2002/xforms"
         xmlns:xxforms="http://orbeon.org/oxf/xml/xforms">

    <!-- NOTE on namespaces: in editable mode, we might be passed a path with @edit-ref that makes assumptions on NS prefixes,
         such as xh:, xf:, etc. so make sure the basic ones are defined for now. Would be worth improving on this. -->

    <xbl:binding id="fr-grid-binding" element="fr|grid">

        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy.xsl"/>
                <xsl:import href="oxf:/oxf/xslt/utils/xbl.xsl"/>

                <xsl:variable name="root" select="/*[1]"/>

                <!-- Point to the source element for this grid -->
                <xsl:variable name="edit-ref"           select="$root/@edit-ref"/>
                <xsl:variable name="is-editable"        select="exists($edit-ref)"/>

                <xsl:variable name="is-repeat"          select="$root/@repeat = 'true' or exists($root/@minOccurs | $root/@maxOccurs | $root/@min | $root/@max)"/>
                <xsl:variable name="grid-rows"          select="($root/*:body, $root/self::*)[1]/*:tr"/>

                <xsl:variable name="static-row-count"   select="count($grid-rows)"/>
                <xsl:variable name="static-col-count"   select="count($grid-rows[1]/*:td)"/>
                <!-- Show LHH in header only if repeating over a row group containing only one row -->
                <xsl:variable name="lhh-in-header"      select="$is-repeat and $static-row-count = 1"/>

                <xsl:variable name="min-occurs"         select="($root/@min, $root/@minOccurs, 0)[1]"/>
                <xsl:variable name="max-occurs"         select="($root/@max, $root/@maxOccurs, 'unbounded')[1]"/>
                <xsl:variable name="readonly"           select="$root/@readonly = 'true'"/>
                <xsl:variable name="remove-constraint"  select="$root/@remove-constraint"/>
                <xsl:variable name="repeat-id"          select="concat($root/@id, '-repeat')"/>

                <xsl:variable name="repeat-expression"  select="($root/@ref, $root/@nodeset, concat('xxf:bind(''', $root/@bind, ''')'))[1]" as="xs:string"/>

                <xsl:template match="/*">

                    <!-- Root element -->
                    <xf:group appearance="xxf:internal">
                        <xsl:if test="$is-editable">
                            <!-- Point to the design-time source -->
                            <xf:var name="grid" value="{$edit-ref}"/>

                            <!-- Form Builder resources -->
                            <xf:var name="fb-resources" value="xxf:get-variable('fr-resources-model', 'fr-form-resources')"/>
                        </xsl:if>

                        <xsl:if test="$is-repeat">
                            <xf:var name="repeat-context">
                                <xxf:sequence value="." xxbl:scope="outer"/>
                            </xf:var>
                            <xf:var name="repeat-sequence">
                                <xxf:sequence value="{$repeat-expression}" xxbl:scope="outer"/>
                            </xf:var>
                            <xf:var name="repeat-origin">
                                <xxf:sequence value="{if (@origin) then @origin else '()'}" xxbl:scope="outer"/>
                            </xf:var>
                            <xf:var name="repeat-index">
                                <!-- Replace quote by two quotes in the repeat id to avoid possible XPath injection -->
                                <xxf:sequence value="index('{replace($repeat-id, '''', '''''')}')" xxbl:scope="outer"/>
                            </xf:var>
                            <!-- NOTE: We need a better way to get the Form Runner mode. See also #673 and #629. -->
                            <xf:var name="view-mode" value="xxf:readonly($repeat-context)"/>
                        </xsl:if>

                        <!-- Grid table -->
                        <xh:table class="{'fr-grid',
                                          @class,
                                          concat('fr-grid-', controlOps:controlName(@id)),
                                          if ($is-repeat)
                                                then ('table', 'table-bordered', 'table-condensed', 'fr-repeat', 'fr-repeat-table',
                                                      if ($static-row-count le 1) then 'fr-repeat-single-row' else 'fr-repeat-multiple-rows')
                                                else 'fr-norepeat',
                                          if ($is-editable)
                                                then gridOps:canDoClasses(@id)
                                                else ()}">
                            <!-- Colgroup to make column sizing with CSS easier -->
                            <xh:colgroup>
                                <xsl:if test="$is-repeat">
                                    <xh:col class="fr-repeat-column-trigger" xxf:control="true" ref="$repeat-context[not($view-mode)]"/>
                                </xsl:if>
                                <xsl:for-each select="$grid-rows[1]/*:td">
                                    <xh:col class="fr-grid-col-{position()}"/>
                                </xsl:for-each>
                            </xh:colgroup>
                            <!-- If repeat, add buttons and headers-->
                            <xsl:if test="$is-repeat">
                                <xh:thead class="yui-dt-hd">
                                    <!-- Row with column headers -->
                                    <xh:tr class="fr-dt-master-row">
                                        <xsl:if test="not($readonly)">
                                            <xh:th class="fr-repeat-column fr-repeat-column-trigger" xxf:control="true" ref="$repeat-context[not($view-mode)]">
                                                <xf:var name="can-add" as="xs:boolean"
                                                         value="{if ($max-occurs = 'unbounded') then 'true()'
                                                                   else concat('count($repeat-sequence) lt ', $max-occurs)}"/>
                                                <xf:trigger appearance="minimal" ref="$repeat-context[$can-add]" tabindex="-1">
                                                    <xf:label><xh:i class="icon-plus-sign"/></xf:label>
                                                    <xf:insert ev:event="DOMActivate"
                                                               context="$repeat-context"
                                                               ref="$repeat-sequence"
                                                               origin="$repeat-origin"
                                                               at="$repeat-index"/>
                                                </xf:trigger>
                                                <xf:group ref="$repeat-context[not($can-add)]">
                                                    <xh:i class="icon-plus-sign disabled"/>
                                                </xf:group>
                                            </xh:th>
                                        </xsl:if>
                                        <xsl:for-each select="$grid-rows[1]/*:td">
                                            <xsl:variable name="control" select="*[1]"/>
                                            <xh:th>
                                                <xsl:if test="$is-editable">
                                                    <xsl:attribute name="class"       select="'fb-grid-th', 'xforms-activable'"/>
                                                    <xsl:attribute name="xxf:control" select="'true'"/>
                                                </xsl:if>
                                                <xsl:copy-of select="@colspan"/>
                                                <xsl:if test="$lhh-in-header and empty($control/self::xf:trigger)">
                                                    <!-- NOTE: XPath expressions on LHH elements can't be relative to the controls in case there is no iteration. -->
                                                    <!-- LATER: Change this once labels outside repeats are supported (http://goo.gl/tSz4i)? -->
                                                    <xf:group xxbl:scope="outer">
                                                        <xsl:apply-templates select="$control/(xf:label, xf:help, xf:hint)"/>
                                                    </xf:group>
                                                </xsl:if>
                                            </xh:th>
                                        </xsl:for-each>
                                    </xh:tr>
                                    <!-- Optional row(s) shown before the repeated rows -->
                                    <!--<xsl:for-each select="fr:header">-->
                                        <!--<xsl:apply-templates select="xh:tr" mode="prepend-td"/>-->
                                        <!--<xsl:apply-templates select="fr:tr" mode="prepend-td"/>-->
                                    <!--</xsl:for-each>-->
                                </xh:thead>
                            </xsl:if>

                            <!--<xh:tbody class="yui-dt-data">-->
                                <!-- Iterate over table rows -->

                                <!-- Row group -->
                                <xsl:variable name="content">
                                    <xsl:choose>
                                        <xsl:when test="$is-editable or $is-repeat">
                                            <xsl:for-each select="$grid-rows">
                                                <xsl:variable name="static-row-pos" select="position()"/>
                                                <xh:tr>
                                                    <xsl:choose>
                                                        <xsl:when test="$is-repeat">
                                                            <xsl:attribute name="class">
                                                                <xsl:value-of select="'fb-grid-tr', @class"/>
                                                                <xsl:text> {if (xxf:repeat-position() mod 2 = 1) then 'yui-dt-even' else 'yui-dt-odd'}</xsl:text>
                                                                <xsl:if test="$static-row-pos = 1">{if (xxf:repeat-position() = 1) then ' yui-dt-first' else ()}</xsl:if>
                                                            </xsl:attribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:attribute name="class"><xsl:value-of select="'fb-grid-tr', @class"/></xsl:attribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                    <xsl:copy-of select="@* except @class"/>

                                                    <xsl:if test="$is-repeat">
                                                        <xsl:if test="not($readonly) and $static-row-pos = 1">
                                                            <xh:td class="fr-repeat-column-trigger" rowspan="{$static-row-count}" xxf:control="true" ref="$repeat-context[not($view-mode)]">
                                                                <!-- Remove trigger -->
                                                                <xsl:choose>
                                                                    <xsl:when test="$remove-constraint">
                                                                        <xf:var name="remove-constraint">
                                                                            <!-- Evaluate the constraint in the context of the iteration -->
                                                                            <xxf:sequence value="{$remove-constraint}" xxbl:scope="outer"/>
                                                                        </xf:var>
                                                                        <xf:var name="can-remove" value="$remove-constraint and count($repeat-sequence) gt {$min-occurs}"/>
                                                                    </xsl:when>
                                                                    <xsl:otherwise>
                                                                        <xf:var name="can-remove" value="count($repeat-sequence) gt {$min-occurs}"/>
                                                                    </xsl:otherwise>
                                                                </xsl:choose>
                                                                <xf:trigger appearance="minimal" ref="$repeat-context[$can-remove]" tabindex="-1">
                                                                    <xf:label><xh:i class="icon-minus-sign"/></xf:label>
                                                                    <xf:delete ev:event="DOMActivate" ref="$repeat-sequence" at="$repeat-index"/>
                                                                </xf:trigger>
                                                                <xf:group ref="$repeat-context[not($can-remove)]">
                                                                    <xh:i class="icon-minus-sign disabled"/>
                                                                </xf:group>
                                                            </xh:td>
                                                        </xsl:if>
                                                    </xsl:if>

                                                    <!-- Iterate over table cells -->
                                                    <xsl:for-each select="*:td">
                                                        <xsl:variable name="static-col-pos" select="position()"/>
                                                        <xsl:variable name="control" select="*[1]" as="element()?"/>
                                                        <xsl:variable name="has-control" select="exists($control)"/>
                                                        <!-- NOTE: Not all controls with fr-attachment require a separate upload button.
                                                             For example, fr:attachment and fr:image-attachment already provide an upload
                                                             button. So for now, we have only xf:output with an image mediatype. -->
                                                        <xsl:variable name="has-upload" select="exists($control/self::xf:output[starts-with(@mediatype, 'image/')])"/>

                                                        <xsl:if test="$is-editable">
                                                            <!-- Point to this td -->
                                                            <xf:var name="td" value="$grid/*:tr[{$static-row-pos}]/*:td[{$static-col-pos}]" as="element()"/>
                                                            <!-- Point to the contained control -->
                                                            <xf:var name="control" value="$td/*[1]" as="element()?"/>
                                                        </xsl:if>

                                                        <xh:td>
                                                            <xsl:choose>
                                                                <xsl:when test="$is-editable">
                                                                    <xsl:attribute name="xxf:control">true</xsl:attribute>
                                                                    <xsl:attribute name="class"><xsl:value-of select="'xforms-activable', 'fb-grid-td', @class"/>{if (xxf:get-variable('fr-form-model', 'selected-cell') = $td/@id) then ' fb-selected' else ''}</xsl:attribute>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                            <xsl:copy-of select="@* except (@class, @xxf:control)"/>
                                                            <!-- NOTE: Add itemset or upload classes to allow the client to decide whether to place the itemset editor or the upload button -->
                                                            <xh:div class="{('fr-grid-content', if ($has-upload) then 'fb-upload' else ())}{
                                                                    if ($is-editable) then '{if (exists($control) and controlOps:hasEditor($control, ''static-itemset'')) then '' fb-itemset'' else ''''}' else ''}">
                                                                <!-- Optimization: don't generate a group for empty cells -->
                                                                <xsl:if test="$has-control">
                                                                    <xf:group xxbl:scope="outer" appearance="xxf:internal">
                                                                        <!-- If the label, help, and hint are shown in the table header, don't put them in the cell -->
                                                                        <xsl:for-each select="$control">
                                                                            <xsl:if test="$is-editable">
                                                                                <!-- So the client-side code can populate populate the checkbox when editing the label -->
                                                                                <xh:span class="fb-label-is-html"><xsl:value-of select="xf:label/@mediatype = 'text/html'"/></xh:span>
                                                                            </xsl:if>
                                                                            <xsl:copy>
                                                                                <xsl:variable name="lhh" select="xf:label | xf:help | xf:hint"/>
                                                                                <xsl:variable name="nodes" select="@* | node()"/>
                                                                                <xsl:copy-of select="if ($lhh-in-header and empty($control/self::xf:trigger)) then ($nodes except $lhh) else $nodes"/>
                                                                            </xsl:copy>
                                                                        </xsl:for-each>
                                                                    </xf:group>
                                                                </xsl:if>
                                                            </xh:div>
                                                        </xh:td>
                                                    </xsl:for-each>
                                                </xh:tr>
                                            </xsl:for-each>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <!-- Apply everything and annotate tr/td. This also enables nested groups/variables. -->
                                            <!-- LATER: Should support groups/vars or similar mechanism generally, also with repeats and editable modes. Maybe a "visible" predicate on tr/td? -->
                                            <xf:group xxbl:scope="outer" appearance="xxf:internal">
                                                <xsl:apply-templates select="*"/>
                                            </xf:group>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:variable>

                                <xsl:choose>
                                    <xsl:when test="$is-repeat">
                                        <!-- Enclose within repeat -->
                                        <xf:repeat ref="{$repeat-expression}" id="{$repeat-id}" xxbl:scope="outer">
                                            <xf:group appearance="xxf:internal" xxbl:scope="inner" id="my-group">
                                                <xsl:copy-of select="$content"/>
                                            </xf:group>
                                        </xf:repeat>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <!-- Only one instance of the content -->
                                        <xsl:copy-of select="$content"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                            <!--</xh:tbody>-->

                            <!--<xsl:if test="fr:footer">-->
                                <!--<xh:tfoot>-->
                                    <!--&lt;!&ndash; Optional row(s) shown after the repeated rows &ndash;&gt;-->
                                    <!--<xsl:for-each select="fr:footer">-->
                                        <!--<xsl:apply-templates select="xh:tr" mode="prepend-td"/>-->
                                        <!--<xsl:apply-templates select="fr:tr" mode="prepend-td"/>-->
                                    <!--</xsl:for-each>-->
                                <!--</xh:tfoot>-->
                            <!--</xsl:if>-->
                        </xh:table>
                    </xf:group>
                </xsl:template>

                <xsl:template match="*:tr[empty(ancestor::*/local-name()[not(. = ('group', 'grid'))])]">
                    <xh:tr>
                        <!-- Place Bootstrap classes  when not in a repeated grid -->
                        <!--<xsl:if test="not($is-repeat)"><xsl:attribute name="class">row</xsl:attribute></xsl:if>-->
                        <xsl:copy-of select="@* except @class"/>
                        <xsl:apply-templates select="*"/><!-- don't bother with other nodes -->
                    </xh:tr>
                </xsl:template>

                <xsl:template match="*:td[empty(ancestor::*/local-name()[not(. = ('group', 'tr', 'grid'))])]">
                    <xh:td>
                        <!-- Place Bootstrap classes  when not in a repeated grid -->
                        <!--<xsl:if test="not($is-repeat)"><xsl:attribute name="class" select="concat('span', 12 idiv $static-col-count)"/></xsl:if>-->
                        <xsl:copy-of select="@* except @class"/>
                        <xh:div class="fr-grid-content"><!-- TODO: see if we want to keep this -->
                            <xsl:apply-templates select="node()"/>
                        </xh:div>
                    </xh:td>
                </xsl:template>

            </xsl:transform>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>